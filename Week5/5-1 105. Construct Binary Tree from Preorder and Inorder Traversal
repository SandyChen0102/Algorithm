/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 為了快速查找 inorder 中值的位置，用一個 map 儲存 val -> index
    unordered_map<int, int> inorderMap;

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        // 建立中序索引表加速查找
        for (int i = 0; i < inorder.size(); ++i) {
            inorderMap[inorder[i]] = i;
        }

        return build(preorder, 0, preorder.size() - 1,
                     inorder, 0, inorder.size() - 1);
    }

    TreeNode* build(const vector<int>& preorder, int preStart, int preEnd,
                    const vector<int>& inorder, int inStart, int inEnd) {
        // 遞迴終止條件
        if (preStart > preEnd || inStart > inEnd) return nullptr;

        // 前序的第一個節點就是根節點
        int rootVal = preorder[preStart];
        TreeNode* root = new TreeNode(rootVal);

        // 從 inorder 中找出根節點的位置
        int rootIndex = inorderMap[rootVal];

        // 左子樹的節點數量
        int leftSize = rootIndex - inStart;

        // 遞迴建構左子樹與右子樹
        root->left = build(preorder, preStart + 1, preStart + leftSize,
                           inorder, inStart, rootIndex - 1);

        root->right = build(preorder, preStart + leftSize + 1, preEnd,
                            inorder, rootIndex + 1, inEnd);

        return root;
    }
};

