class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;     // 儲存所有排列結果
        vector<int> path;               // 當前排列狀態
        vector<bool> used(nums.size()); // 記錄哪些數字已被使用

        backtrack(nums, used, path, result);
        return result;
    }

private:
    // 回溯主函式
    void backtrack(const vector<int>& nums, vector<bool>& used, vector<int>& path, vector<vector<int>>& result) {
        // 如果 path 長度等於輸入陣列長度，代表一個完整排列
        if (path.size() == nums.size()) {
            result.push_back(path);
            return;
        }

        // 遍歷所有數字
        for (int i = 0; i < nums.size(); i++) {
            if (used[i]) continue; // 若已使用則跳過

            // 做選擇
            used[i] = true;
            path.push_back(nums[i]);

            // 遞迴
            backtrack(nums, used, path, result);

            // 撤銷選擇（回溯）
            path.pop_back();
            used[i] = false;
        }
    }
};

