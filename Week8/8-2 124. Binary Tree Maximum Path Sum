/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxSum = INT_MIN; // 全局最大路徑和，初始設成最小整數

    int maxPathSum(TreeNode* root) {
        dfs(root);
        return maxSum;
    }

private:
    // 遞迴函式：回傳從這個節點向下單邊延伸的最大和
    int dfs(TreeNode* node) {
        if (!node) return 0; // 空節點，回傳 0

        // 分別計算左子樹、右子樹的最大單邊貢獻值
        int left = max(dfs(node->left), 0);  // 如果小於0就不選（捨棄負數路徑）
        int right = max(dfs(node->right), 0);

        // 更新全局最大值：以當前節點為最高點（可以左右都連接）
        maxSum = max(maxSum, left + right + node->val);

        // 回傳：從當前節點出發，只能選左或右一條路徑
        return node->val + max(left, right);
    }
};
