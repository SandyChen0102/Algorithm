class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.length(), n = p.length();

        // 使用兩個一維陣列：prev 表示前一列，curr 表示當前列
        vector<bool> prev(n + 1, false), curr(n + 1, false);

        // 初始情況：空字串 s 與空模式 p 是匹配的
        prev[0] = true;

        // 處理 pattern 開頭為 * 的情況：可匹配空字串
        for (int j = 1; j <= n; ++j) {
            if (p[j - 1] == '*') {
                // 只要前面仍是 true，則 * 可以繼續匹配空字串
                prev[j] = prev[j - 1];
            }
        }

        // 動態規劃主體：逐行處理 s 的每個字元
        for (int i = 1; i <= m; ++i) {
            curr[0] = false; // 空 pattern 不可能匹配非空 s

            for (int j = 1; j <= n; ++j) {
                if (p[j - 1] == s[i - 1] || p[j - 1] == '?') {
                    // 字元相等或為 '?'，可以延續前一對子問題的結果
                    curr[j] = prev[j - 1];
                } else if (p[j - 1] == '*') {
                    // '*' 可匹配空字元（curr[j - 1]）或匹配一個字元（prev[j]）
                    curr[j] = curr[j - 1] || prev[j];
                } else {
                    // 字元不相等，且不是 '?' 或 '*'，不能匹配
                    curr[j] = false;
                }
            }

            // 更新 prev，進入下一行
            swap(prev, curr);
        }

        // 最終結果在 prev[n]，代表整個 s 與整個 p 是否匹配
        return prev[n];
    }
};
