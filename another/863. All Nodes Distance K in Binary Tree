class Solution {
private:
    std::vector<int> result; // 儲存最終結果的向量

    // 輔助函數：從給定節點 node 開始，向下遍歷尋找距離為 target_dist 的節點
    // 這裡的 current_dist 是從 node 到 target_dist 期望的相對距離
    void addNodesAtDistance(TreeNode* node, int current_dist, int target_dist) {
        // 基本情況：如果節點為空或距離超過目標距離，則返回
        if (node == nullptr || current_dist > target_dist) {
            return;
        }
        // 如果達到目標距離，將節點值加入結果
        if (current_dist == target_dist) {
            result.push_back(node->val);
            return;
        }
        // 遞迴遍歷左右子樹
        addNodesAtDistance(node->left, current_dist + 1, target_dist);
        addNodesAtDistance(node->right, current_dist + 1, target_dist);
    }

    // 主 DFS 函數：尋找目標節點並計算距離
    // 返回值：如果目標節點在當前節點的子樹中，則返回目標節點與當前節點的距離；否則返回 -1。
    int dfs(TreeNode* node, TreeNode* target, int k) {
        // 基本情況：如果節點為空，則目標節點不在其子樹中
        if (node == nullptr) {
            return -1;
        }

        // 如果找到目標節點
        if (node == target) {
            // 從目標節點開始，向下尋找距離為 k 的節點
            addNodesAtDistance(node, 0, k);
            return 0; // 目標節點與自身的距離為 0
        }

        // 遞迴地在左子樹中尋找目標節點
        int left_dist = dfs(node->left, target, k);
        if (left_dist != -1) { // 如果目標節點在左子樹中找到
            // 當前節點 (node) 到目標節點的距離是 left_dist + 1
            int dist_from_curr_to_target = left_dist + 1;
            
            // 如果當前節點到目標節點的距離恰好是 k
            if (dist_from_curr_to_target == k) {
                result.push_back(node->val);
            } 
            // 如果當前節點是目標節點的祖先，且距離小於 k
            // 我們需要從當前節點的右子樹中尋找距離為 k - (dist_from_curr_to_target + 1) 的節點
            // 因為要經過當前節點到右子樹，所以還要減 1
            else if (dist_from_curr_to_target < k) {
                // 從當前節點的右子樹向下尋找，目標距離為 k - (當前節點到目標節點的距離) - 1
                // (k - dist_from_curr_to_target) 是從目標節點到右子樹某點的距離
                // 再減 1 是因為要從 node->right 開始算，所以是 (k - dist_from_curr_to_target - 1)
                addNodesAtDistance(node->right, 0, k - dist_from_curr_to_target - 1);
            }
            return dist_from_curr_to_target; // 返回當前節點到目標節點的距離
        }

        // 遞迴地在右子樹中尋找目標節點
        int right_dist = dfs(node->right, target, k);
        if (right_dist != -1) { // 如果目標節點在右子樹中找到
            // 當前節點 (node) 到目標節點的距離是 right_dist + 1
            int dist_from_curr_to_target = right_dist + 1;

            // 如果當前節點到目標節點的距離恰好是 k
            if (dist_from_curr_to_target == k) {
                result.push_back(node->val);
            } 
            // 如果當前節點是目標節點的祖先，且距離小於 k
            // 我們需要從當前節點的左子樹中尋找距離為 k - (dist_from_curr_to_target + 1) 的節點
            else if (dist_from_curr_to_target < k) {
                // 從當前節點的左子樹向下尋找，目標距離為 k - (當前節點到目標節點的距離) - 1
                addNodesAtDistance(node->left, 0, k - dist_from_curr_to_target - 1);
            }
            return dist_from_curr_to_target; // 返回當前節點到目標節點的距離
        }

        return -1; // 目標節點不在當前節點的任何子樹中
    }

public:
    // 主函數：找到所有距離為 K 的節點
    std::vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        result.clear(); // 確保每次呼叫時清空結果向量
        dfs(root, target, k); // 從根節點開始 DFS 遍歷
        return result; // 返回最終結果
    }
};
